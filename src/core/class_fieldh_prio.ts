/*
 *  Copyright 2015-17 Baubadil GmbH. All rights reserved.
 */
import * as $ from 'jquery';
import DrnBootstrapSlider from '../js/ctl-slider';
import DrnPopover from '../js/inc-popover';
import { drnFindByID } from '../js/shared';
import _ from 'core/nls';

/**
 *  Subclasses must implement the onSubmit() method.
 */
abstract class SliderPopover extends DrnPopover
{
    protected oSlider: DrnBootstrapSlider;
    protected jqSubmitButton: JQuery;

    /**
     *  This looks into jqSharedPopoverForm for an entry field with the given DOM class.
     *  We can't use IDs since that form may be used several times.
     */
    constructor(jqAttachPopoverTo: JQuery,
                jqSharedPopoverForm: JQuery,            //!< in: hidden HTML template for the dialog in the popover
                title: string,
                protected entryFieldClass: string,
                protected initialValue: number,
                protected iMin: number,
                protected iMax: number)
    {
        super(jqAttachPopoverTo);

        this.init(title,
                  jqSharedPopoverForm.html());
    }

    protected initContents()
    {
        if (!this.jqPopoverContents.length)
            throw "jqPopoverContents is empty";

        this.oSlider = new DrnBootstrapSlider(this.jqPopoverContents.find('.' + this.entryFieldClass),
                                              this.initialValue,
                                              this.iMin,
                                              this.iMax);

        this.jqPopoverContents.find('.drn-cancel').on('click', () => {
           this.dismiss();
        });
        this.jqSubmitButton = this.jqPopoverContents.find('.drn-save');
        this.jqSubmitButton.on('click', () => {
            this.onSubmit();
        });
    }

    /**
     *  Gets called by execAjax() with a short delay after the ajax call succeeded.
     *
     *  The APIHandler default does nothing, but we will dismiss the popover.
     */
    protected onSubmitSuccess(json)
        : void
    {
        this.dismiss();
    }

    /**
     *  Gets called by execAjax() with a short delay after the ajax call failed.
     *
     *  The APIHandler default does nothing, but we need to find the error box in
     *  the popover and have it display the error.
     */
    protected onSubmitError(jqXHR)
    {
        this.handleError(this.jqPopoverContents, jqXHR);
    }

    protected abstract onSubmit();
}

/**
 *  Wrapper for the hand icon clicky thing next to the priority value in lists views.
 *  This adds a handler to the hand icon which shows a popover with a "set priority"
 *  dialog which invokes the PUT/api/set-priority REST API.
 */
class SetPriorityModal extends SliderPopover
{
    private readonly idTicket: number;

    constructor(protected maxPrio: number,
                jqHandButton: JQuery,          //!< in: JQuery object for the hand button
                jqSharedPopoverForm: JQuery)
    {
        super(jqHandButton,
              jqSharedPopoverForm,
              _('setpriority'),
              'drn-set-priority',
              parseInt(jqHandButton.attr('data-priority')),
              1,
              maxPrio + 1);

        this.idTicket = parseInt(jqHandButton.attr('data-ticket'));

    }

    protected onSubmit()
    {
        let sliderValue = this.oSlider.getValue();
        if (sliderValue != this.initialValue)
        {
            this.execAjax(this.jqSubmitButton,
                          'PUT',
                          `${g_rootpage}/api/priority/${this.idTicket}/${sliderValue}`,
                          []);

            let jqPrioSpan = drnFindByID('prio-' + this.idTicket);
            jqPrioSpan.html(sliderValue.toString());

            // Animate the grandparent DIV inserted by the PHP backend.
            let jqCell = jqPrioSpan.parent().parent();
            jqCell.removeClass('animated tada');
            jqCell.addClass('animated tada');

            // In case user opens this one again:
            this._jqAttachPopoverTo.attr('data-priority', sliderValue);
        }
        else
            this.dismiss();
    }
}

/**
 *  Called from the code generated by PriorityHandler::formatValueHTML().
 */
export function initSetPriorityButtons(maxPrio: number,
                                classname: string,
                                idSharedPriorityForm: string)
{
    let jqSharedPopoverForm = drnFindByID(idSharedPriorityForm);
    $('.' + classname).each((index, elm) => {
        let jqButtonClicked = $(elm);
        new SetPriorityModal(maxPrio, jqButtonClicked, jqSharedPopoverForm);
    });
}
