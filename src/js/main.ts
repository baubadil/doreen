/*
 *  Copyright 2015-17 Baubadil GmbH. All rights reserved.
 */
import * as $ from 'jquery';
import { drnFindByID, drnShowAndFadeIn } from './shared';
import { drnShowBusyCursor, drnEscapeForRegExp } from './inc-globals';
import { GetTemplatesApiResult } from './inc-api-types';
import { SetBootstrapSlider } from './ctl-slider';

/*
 *  "Main" Typescript code. This is compiled into core_ts.js and always included on every Doreen page.
 *  This contains handler that get called from various bits generated by the PHP backend.
 */

/**
 * Set authorization header for all API calls.
 */
export const drnGetJWT = () => document.cookie.replace(/(?:(?:^|.*;\s*)drn-jwt\s*=\s*([^;]*).*$)|^.*$/, "$1");
{
    $.ajaxSetup({
        beforeSend: (jqXHR, options) =>
        {
            const separator = options.url.indexOf('?') !== -1 ? '&' : '?';
            options.url += separator + 'lang=' + g_globals.locale;
            if (!options.headers)
                options.headers = {};
            jqXHR.setRequestHeader('Authorization', `Bearer ${drnGetJWT()}`);
        }
    });
}

export function drnUpperCaseEntryField(id)
{
    // let elm = document.getElementById('#' + id);
    // x.value = x.value.toUpperCase();
    let jq = drnFindByID(id);
    //
    jq.on('change', () => {
        // Uppercase-ize contents
        jq.val(jq.val().toLocaleUpperCase());
    });
}

export function drnInitUserAlert(idAlertBox: string,
                          userKey: string,
                          userValue: string)
{
    let jq = drnFindByID(idAlertBox);
    let jqButton = jq.find("button");
    jqButton.on('click', () => {
        jq.fadeOut();
        $.post(`${g_rootpage}/api/userkey/${userKey}/${userValue}`);
    });
}

/**
 *  Attaches a handler to #idButton that will show all elements with .classInactiveButtons.
 *  It is assumed that those buttons all have a .hide class to hide them.
 */
export function activateShowMoreButton(classActivateButton: string,
                                       classInactiveButtons: string)
{
    let jqActivateButtons = $('.'+ classActivateButton);
    jqActivateButtons.on('click', () => {
        $('.' + classInactiveButtons).removeClass('hide');
        jqActivateButtons.fadeOut();
        return false;
    });
}

export function onEditTaskPageReady(idRadioGroupDiv: string,
                             statusClosed: number,
                             idSelectPriority: string)
{
    let jqRadiosUnderDiv = $('#' + idRadioGroupDiv).find('input[type="radio"]');
    jqRadiosUnderDiv.click((e: Event) => {
        const val = $(e.target).val();
        if (val == statusClosed)
            SetBootstrapSlider(idSelectPriority, 1, true);
    });

}

/**
 *  Set the cookie consent cookie without reloading.
 */
export function handleAcceptCookies(idAlert: string)
{
    const jqAlert = drnFindByID(idAlert);
    jqAlert.find('button').one('click', (e) => {
        e.preventDefault();
        document.cookie = `CookieConsent=yes;path=${g_rootpage}/;max-age=${60*60*24*365}`;
        jqAlert.hide();
    });
}
