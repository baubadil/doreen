/*
 *  Copyright 2015-17 Baubadil GmbH. All rights reserved.
 */
import * as $ from 'jquery';
import AjaxModal from './inc-ajaxmodal';
import { drnFindByID, myEscapeHtml } from './shared';
import SessionManager from './sessionmanager';
import { GetUsersApiResult } from './inc-api-types';
import DrnMessageBox from './messagebox';
import { drnGetJWT } from './main';

/*
 *  "Main" Typescript code. This is compiled into core_ts.js and always included on every Doreen page.
 */


/**
 *  Initializes the "stop impersonating" menu item in the user menu, which is only shown if an administrator
 *  is currently impersonating another user. Called from the document-ready only in that case.
 *
 *  This calls the POST /impersonate REST API with a UID of 0 to stop impersonating.
 */
export function drnInitStopImpersonating(idMenuItem: string)
{
    drnFindByID(idMenuItem).on('click', () =>
    {
        $.post(g_rootpage + "/api/impersonate?uid=0",
               { },
               () => {
                    /* Reload current page with the new session data. */
                    if (window.sessionStorage && window.sessionStorage.getItem('originalJWT'))
                    {
                        const token = window.sessionStorage.getItem("originalJWT");
                        ImpersonateDialog.setJWTCookie(token);
                        window.sessionStorage.removeItem("originalJWT");
                    }
                    else
                    {
                        const anHourAgo = new Date(Date.now() - 3600000);
                        ImpersonateDialog.setJWTCookie(`;expires=${anHourAgo.toUTCString()}`);
                    }
                    window.location.reload(true);
               });
    });
}

/**
 *  Subclass of AjaxModel which diplays the "Impersonate" dialog (a dialog template generated by the
 *  PHP backend). The template has an empty DIV which must be replaced with a drop-down of users that
 *  can be impersonated.
 */
export class ImpersonateDialog extends AjaxModal
{
    static setJWTCookie(token: string)
    {
        let secure = '';
        if (window.location.protocol === 'https')
            secure = ';secure';
        document.cookie = `drn-jwt=${token};path=${g_rootpage}/${secure}`;
        SessionManager.onJWTChange('impersonate');
    }

    constructor()
    {
        super('impersonateDialog',
              [ 'uid' ],
              '/impersonate',
              false);

        let that = this;
        this.getUsers(  (data: GetUsersApiResult) =>
                        {
                            data.results.sort((a, b) => {
                                return (a.longname).localeCompare(b.longname);
                            });
                            /* Fill the drop-down of users. The back-end gives us an fCanImpersonate flag for
                               all users that the administrator can currently impersonate. Having this flag
                               in the back-end allows us to keep all the checks consistent. */
                            let c = 0;
                            let jqUsersDropDown = drnFindByID(this._idDialog + "-user");
                            let id2 = this._idDialog + "-uid";
                            let html = `<select id='${id2}'>`;
                            for (let u of data.results)
                                if (u.fCanImpersonate)
                                {
                                    let htmlLongName = myEscapeHtml(u.longname);
                                    html += `<option value=${u.uid}>${htmlLongName}</option>`;
                                    ++c;
                                }

                            html += "</select>";
                            jqUsersDropDown.html(html);

                            if (c)
                                that.show();
                            else
                                new DrnMessageBox("Error", "There are no users to impersonate.");
                        });
    }

    /**
     *  Override the parent to additionally reload the page on success with the new session data.
     */
    protected onSubmitSuccess(json)
        : void
    {
        super.onSubmitSuccess(json);

        if (window.sessionStorage)
            window.sessionStorage.setItem("originalJWT", drnGetJWT());
        ImpersonateDialog.setJWTCookie(json.token);

        /* Reload current page with the new session data. */
        window.location.reload(true);
    }
}

SessionManager.registerJWTChangeHandler('impersonate', () => {
    // Remove original JWT stored by impersonation, since that is no longer valid.
    if (window.sessionStorage && window.sessionStorage.getItem('originalJWT'))
        window.sessionStorage.removeItem('originalJWT');
});
