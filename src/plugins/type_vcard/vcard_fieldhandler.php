<?php

/*
 *  Copyright 2015-17 Baubadil GmbH. All rights reserved.
 */

namespace Doreen;

use \JeroenDesloovere\VCard\VCard;
use \JeroenDesloovere\VCard\VCardParser;

/*
 *  Use cases:
 *
 *   1. Create/edit a VCard that is a Doreen ticket.
 *
 *   2. Import an xTracker address book entry to a local VCard ticket.
 *
 *   3. Create/edit a VCard that is on a CardDAV server.
 *      ** How are these referenced? Do they have an ID each?
 *
 *   4. Find duplicate contacts, including those from other plugins
 *      and vcard servers. Normalize contacts in some way to accomplish that.
 *
 *   5. Merge contacts and update references to them.
 *
 *   6. Export contact tickets as VCard files (download).
 *
 *  Steps:
 *
 *   1. Design the ticket fields for vcards. Maybe submit the vcard from
 *      javascript altogether? https://github.com/enesser/vCards-JS
 *
 */

/********************************************************************
 *
 *  VCardHandler class
 *
 ********************************************************************/

/**
 *  FieldHandler derivative for FIELD_VCARD ('vcard'), which stores a
 *  VCard 3.0 string in ticket_texts as generated by the VCard class.
 *
 *  Spec:
 *
 *   -- Can be NULL.
 *
 *   -- In Ticket instance: VCard string
 *
 *   -- GET/POST/PUT JSON data: VCard either in VCard format or as a
 *      JSON string with the proper fields, which will get converted.
 *
 *   -- Database: row in ticket_texts, unless NULL.
 *
 *   -- Search engine: not searchable. TODO
 */
class VCardHandler extends FieldHandler
{
    public $label = '{{L//Contact}}';

    protected $flSelf =   /* self::FL_LINKIFY_VALUE
                        | self::FL_SHOW_NO_DATA_MSG
                        | */ self::FL_HIGHLIGHT_SEARCH_TERMS;

    const FL_DEFAULT_SIMPLE_FIELDS          = 1 <<  0;
    const FL_SHOW_SIMPLE_FIELDS_CHECKBOX    = 1 <<  1;      // Show or hide the checkbox.
    public $flDisplay = self::FL_SHOW_SIMPLE_FIELDS_CHECKBOX;

    protected $lstrFirstName = '{{L//First name}}';
    protected $lstrLastName = '{{L//Last name}}';
    protected $lstrAddress = '{{L//Address}}';
    protected $lstrPhone = '{{L//Phone}}';


    /********************************************************************
     *
     *  Constructor
     *
     ********************************************************************/

    public function __construct($field_id = FIELD_VCARD)
    {
        FieldHandler::__construct($field_id);
    }


    /********************************************************************
     *
     *  Instance method overrides
     *
     ********************************************************************/

    const FL_2_0PLUS2_SIXTH     = (1 <<  0);
    const FL_2_1PLUS1_SIXTH     = (1 <<  1);
    const FL_3_2PLUS1_QUARTER   = (1 <<  2);
    const FL_3_1PLUS2_QUARTER   = (1 <<  3);
    const FL_4_2PLUS2_THIRD     = (1 <<  4);
    const FL_4_1PLUS3_THIRD     = (1 <<  5);
    const FL_5_2PLUS3           = (1 <<  6);
    const FL_6_2PLUS4_HALF      = (1 <<  7);
    const FL_8_2PLUS6_TWOTHIRDS = (1 <<  8);

    const FL_HIDDEN             = (1 << 11);

    const FL_TEMPLATE_ARRAY     = (1 << 12);

    const VCARD_SHRINK_SIMPLE_CLASS = 'vcard-shrink-simple';
    const VCARD_HIDE_SIMPLE_CLASS = 'vcard-hide-simple';
//    const VCARD_GROW_SIMPLE_CLASS = 'vcard-grow-simple';

    /**
     *  Called for ticket details to add a row to the dialog form which
     *  displays the field data for the ticket and allows for editing it.
     *  Only gets called in MODE_CREATE or MODE_EDIT, because otherwise there is
     *  no editable dialog. (In MODE_READONLY_DETAILS, appendReadOnlyRow() gets called instead.)
     *
     *  We override this to provide many fields for the VCard fields; most of this functionality
     *  is in TypeScript.
     *
     * @return void
     */
    public function appendFormRow(TicketPageBase $oPage)   # in: TicketPageBase instance with ticket dialog information
    {
        $oPage->fContainerFluid = TRUE;

        $idControlBase = $oPage->idDialog.'-'.$this->fieldname;

        $fDefaultSimpleFormat = !!($this->flDisplay & self::FL_DEFAULT_SIMPLE_FIELDS);

        // Wrap the whole VCard in a div so the front end has an easier time poking around in it.
        // If we default to simple fields, then hide the whole DIV, it gets shown by the typescript to avoid flicker.
        $oPage->oDlg->openDiv("$idControlBase-outerdiv", $fDefaultSimpleFormat ? "hidden" : NULL);

        $cColumnsUsed = 12;     # force a new row on first loop
        $fRowOpen = FALSE;

        // Parse current values in edit mode.
        $aJSON = ($oPage->mode == MODE_EDIT) ? self::VCardToJsonArray($this->getValue($oPage)) : [];

        $aAllOptions = [
            'HOME' => L("{{L//Home}}"),
            'WORK' => L("{{L//Work}}"),
            'INTERNET' => L("{{L//Other}}"),
            'FAX' => L("{{L//Fax}}"),
            'CELL' => L("{{L//Mobile}}"),
            'PAGER' => L("{{L//Pager}}"),
        ];

        $llSimpleDialogFields = [];
        $llArrayDialogFields = [];

        $aFields = [];

        $aFields += [
            'prefix'        => [ '{{L//Prefix}}',       self::FL_3_2PLUS1_QUARTER ],
            'firstname'     => [ $this->lstrFirstName,  self::FL_3_1PLUS2_QUARTER,          'realname' ],
            'lastname'      => [ $this->lstrLastName,   self::FL_4_1PLUS3_THIRD,            'realname' ],
            'suffix'        => [ '{{L//Suffix}}',       self::FL_2_1PLUS1_SIXTH ],
            'organization'  => [ '{{L//Company}}',      0,                                  'industry' ],
            'title'         => [ '{{L//Job title}}',    0,                                  'industry' ],
        ];

        $aFields += [
            'aAddresses'    => [ $this->lstrAddress,    self::FL_TEMPLATE_ARRAY,            NULL,       'address', 'HOME|WORK' ],
            'aPhones'       => [ $this->lstrPhone,      self::FL_TEMPLATE_ARRAY,            'phone',    'phone', 'HOME|WORK|FAX|CELL|PAGER' ],
        ];

        $flHide = 0;

        $aFields += [
            'aEmails'       => [ '{{L//Email}}',        self::FL_TEMPLATE_ARRAY | $flHide,  'mail',     'email', 'HOME|WORK|INTERNET' ],
            'aURLs'         => [ '{{L//Web}}',          self::FL_TEMPLATE_ARRAY | $flHide,  'globe',    'url', 'HOME|WORK' ],
        ];

        $fShowCheckbox = !!($this->flDisplay & self::FL_SHOW_SIMPLE_FIELDS_CHECKBOX);
        $oPage->oDlg->openFormRow(NULL, ($fShowCheckbox) ? '' : 'hidden');
        $oPage->oDlg->addGridColumn(2, "");
        $oPage->oDlg->openGridColumn(10);
        $oPage->oDlg->addCheckbox(L("{{L//Show most important contact fields only}}"), "$idControlBase-simpleformat", NULL, NULL, $fDefaultSimpleFormat);
        $oPage->oDlg->close();
        $oPage->oDlg->close(); // form row

        foreach ($aFields as $subid => $a2)
        {
            list($lstr, $fl) = $a2;

            $icon = $a2[2] ?? NULL;

            $rowClass = NULL;

            if ($fl & self::FL_TEMPLATE_ARRAY)
            {
                $aValues = $aJSON[$subid] ?? [ NULL ];
                $subkey = $a2[3];   # 'email', 'phone' etc.
                $strTypes = $a2[4] ?? '';
                $llArrayDialogFields[$subid] = $subkey;
                $rowClass = "vcard-$subkey-group";
            }
            else
            {
                $aValues = [ $aJSON[$subid] ?? NULL ];
                $llSimpleDialogFields[] = $subid;
            }

            foreach ($aValues as $value)
            {
                $cColumnsLabel = 2;

                if ($fl & self::FL_2_0PLUS2_SIXTH)
                {
                    $cColumnsLabel = 0;
                    $cColumnsThis = 2;
                }
                else if ($fl & self::FL_2_1PLUS1_SIXTH)
                {
                    $cColumnsLabel = 1;
                    $cColumnsThis = 1;
                }
                else if ($fl & self::FL_3_2PLUS1_QUARTER)
                    $cColumnsThis = 1;                  # plus 2 for label = 3 colums
                else if ($fl & self::FL_3_1PLUS2_QUARTER)
                {
                    $cColumnsLabel = 1;
                    $cColumnsThis = 2;
                }
                else if ($fl & self::FL_4_2PLUS2_THIRD)
                    $cColumnsThis = 2;                  # plus 2 for label = 4 colums
                else if ($fl & self::FL_4_1PLUS3_THIRD)
                {
                    $cColumnsLabel = 1;
                    $cColumnsThis = 3;                  # plus 2 for label = 4 colums
                }
                else if ($fl & self::FL_5_2PLUS3)
                    $cColumnsThis = 3;                  # plus 2 for label = 5 colums
                else if ($fl & self::FL_6_2PLUS4_HALF)
                    $cColumnsThis = 4;                  # plus 2 for label = 6 colums
                else if ($fl & self::FL_8_2PLUS6_TWOTHIRDS)
                    $cColumnsThis = 6;                  # plus 2 for label = 8 colums
                else
                    $cColumnsThis = 10;                 # plus 2 for label = 12 colums

                if ($cColumnsUsed >= 12)
                {
                    if ($fRowOpen)
                    {
                        $oPage->oDlg->close();      # row
                        $oPage->oDlg->close();      # div around possibly multiple rows
                    }

                    $clsThis = $rowClass;

                    if ($fl & self::FL_HIDDEN)
                        $clsThis = "$clsThis hidden";

                    $oPage->oDlg->openDiv(NULL, $clsThis);
                    $oPage->oDlg->openFormRow();
                    $fRowOpen = TRUE;
                    $cColumnsUsed = 0;
                }

                $idSubControl = $idControlBase.'-'.$subid;
                if ($cColumnsLabel)
                    $oPage->oDlg->addLabel(HTMLChunk::FromEscapedHTML(L($lstr)),
                                           $idSubControl,
                                           "col-xs-".$cColumnsLabel);

                if ($fl & self::FL_TEMPLATE_ARRAY)
                {
                    $select = $value['type'];

                    $cColumnsDropDown = 2;
                    $oPage->oDlg->openGridColumn($cColumnsDropDown, NULL, "text-right ".self::VCARD_HIDE_SIMPLE_CLASS);
                    $aOptions = [];
                    foreach (explode('|', $strTypes) as $type)
                        $aOptions[$type] = $aAllOptions[$type] ?? 'Error';
                    $oPage->oDlg->addSelect(NULL,
                                            $aOptions,
                                            $select,
                                            [ "class" => "vcard-$subkey-type" ]);
                    $oPage->oDlg->close(); // column

                    if ($subkey == 'address')
                    {
                        $oPage->oDlg->openGridColumn($cColumnsThis - 2);
                        $oPage->oDlg->addInput('text',
                                               NULL,
                                               L('{{L//Extended}}'),
                                               toHTML($value['extended'] ?? ''),
                                               0,
                                               NULL,
                                               "vcard-$subkey-extended");
                        $oPage->oDlg->close(); // column
                        $oPage->oDlg->close(); // form row

                        $oPage->oDlg->openFormRow();
                        $oPage->oDlg->addGridColumn($cColumnsLabel + 2, '', NULL, self::VCARD_SHRINK_SIMPLE_CLASS); // empty column

                        $oPage->oDlg->openGridColumn($cColumnsThis - 2);
                        $oPage->oDlg->addInput('text', NULL, L('{{L//Street}}'), toHTML($value['street'] ?? ''), 0, 'road', "vcard-$subkey-street");
                        $oPage->oDlg->close(); // column

                        $oPage->oDlg->close(); // form row
                        $oPage->oDlg->openFormRow();

                        $oPage->oDlg->addGridColumn($cColumnsLabel + 2, '', NULL, self::VCARD_SHRINK_SIMPLE_CLASS); // empty column

                        $this->addCityStateZipColumns($oPage, $cColumnsThis - 6, 2, 2, $subkey, $value);

                        $oPage->oDlg->close(); // form row
                        $oPage->oDlg->openFormRow();
                        $oPage->oDlg->openGridColumn($cColumnsLabel + 2);
                        $oPage->oDlg->close(); // empty column
                        $oPage->oDlg->openGridColumn($cColumnsThis - 2);
                        $oPage->oDlg->addInput('text', NULL, L('{{L//Country}}'), toHTML($value['country'] ?? ''), 0, 'flag', "vcard-$subkey-country");
                    }
                    else
                    {
                        // phone, email
                        $value = $value[$subkey];

                        $oPage->oDlg->openGridColumn($cColumnsThis - $cColumnsDropDown);
                        $oPage->oDlg->addInput('text',
                                               NULL,
                                               '',
                                               toHTML($value),
                                               0,
                                               $icon,
                                               "vcard-$subkey-value");
                    }
                }
                else
                {
                    $oPage->oDlg->openGridColumn($cColumnsThis);
                    $oPage->oDlg->addInput('text',
                                           $idSubControl,
                                           '',
                                           toHTML($value),
                                           0,
                                           $icon);
                }

                $oPage->oDlg->close();      # wide column

                $cColumnsUsed += $cColumnsThis + $cColumnsLabel;     # extra two for label
            }
        }

        if ($fRowOpen)
        {
            $oPage->oDlg->close();      # form row
            $oPage->oDlg->close();      # div around multiple rows
        }

        // The entry field that receives the combined JSON, produced by the front-end code. This has
        // the actual dialog ID so that it gets submitted with the form.
        $oPage->oDlg->addInput('text',
                               $idControlBase,
                               '',
                               toHTML(json_encode($aJSON)),
                               0,
                               NULL,
                               'hidden');

        $oPage->oDlg->close();  // outer div

        WholePage::AddTypescriptCallWithArgs(VCARD_PLUGIN_NAME, /** @lang JavaScript */ 'vcard_initEditor',
                                             [ $oPage->idDialog,
                                               $idControlBase,
                                               $llSimpleDialogFields,
                                               $llArrayDialogFields,
                                               $fDefaultSimpleFormat ] );
    }

    private function addCityStateZipColumns(TicketPageBase $oPage,
                                            int $c1,
                                            int $c2,
                                            int $c3,
                                            $subkey,
                                            $value)
    {
        $oPage->oDlg->openGridColumn($c1);
        $oPage->oDlg->addInput('text', NULL, L('{{L//City}}'), toHTML($value['city'] ?? ''), 0, 'city', "vcard-$subkey-city");
        $oPage->oDlg->close(); // column
        if ($c2)
        {
            $oPage->oDlg->openGridColumn($c2);
            $oPage->oDlg->addInput('text', NULL, L('{{L//Region/state}}'), toHTML($value['region'] ?? ''), 0, NULL, "vcard-$subkey-region");
            $oPage->oDlg->close(); // column
        }
        else
            $oPage->oDlg->addInput('hidden', NULL, NULL, toHTML($value['region'] ?? ''), 0, NULL, "vcard-$subkey-region");

        $oPage->oDlg->openGridColumn($c3);
        $oPage->oDlg->addInput('text', NULL, L('{{L//Zip}}'), toHTML($value['zip'] ?? ''), 0, NULL, "vcard-$subkey-zip");
        $oPage->oDlg->close(); // column
    }

    /**
     *  This must return a plain-text formatting of the given value. $oContext allows for
     *  inspecting the context in which this is called, should that be necessary.
     */
    public function formatValuePlain(TicketContext $oContext,    //!< in: ticket page context
                                     $value)                     //!< in: value to format by this field handler
    {
        $o = $this->formatValueHTML($oContext, $value);
        return Format::HtmlStrip($o->html, TRUE);
    }

    /**
     *  This must return a HTML formatting of the given value. $oContext allows for
     *  inspecting the context in which this is called, should that be necessary.
     *  This must NOT return NULL, ever.
     *
     *  This override parses the member VCard and formats the fields nicely depending on whether we're
     *  in details or list mode.
     */
    public function formatValueHTML(TicketContext $oContext,    //!< in: ticket page context
                                    $value)                     //!< in: value to format by this field handler
        : HTMLChunk
    {
        return self::FormatHtml($value,
                                ($oContext->mode == MODE_READONLY_DETAILS));
    }

    /**
     *  Called by \ref Ticket::toArray() to give each field handler a chance to add meaningful
     *  values to the JSON array returned from there.
     *
     *  We call \ref toJSON() and add a JSON encoding of our vcard data to the array.
     *
     * @return void
     */
    public function serializeToArray(TicketContext $oContext,
                                     &$aReturn,
                                     $fl,
                                     &$paFetchSubtickets)
    {
        $value = $this->getValue($oContext);

        $aReturn += [
            $this->fieldname => self::VCardToJsonArray($value),
            $this->fieldname.'_raw' => $value,# string
        ];
    }

    /**
     *  This gets called by \ref writeToDatabase() for every field before the
     *  new value gets written into the database. This must return a value that
     *  fits into the value column of the field's database table, or, in the
     *  case of FIELDFL_ARRAY, an arra of those values. It can also throw a
     *  APIException with the field name if validation fails.
     *
     *  We override the FieldHandler default to validate that the input data is
     *  either a VCard string or a JSON array, in which case we try to translate it.
     *
     * @return mixed
     */
    public function validateBeforeWrite(TicketContext $oContext,    //!< in: TicketContext instance
                                        $oldValue,                  //!< in: current value (or NULL during create ticket)
                                        $newValue)                  //!< in: suggest new value from form field
    {
        if (!preg_match('/^\s*BEGIN:VCARD/', $newValue))
        {
            if (NULL === ($aJson = json_decode($newValue, TRUE)))
                throw new DrnException("Input data must be either valid VCard format starting with BEGIN:VCARD or a serialized JSON variant");

            return self::JsonArrayToVcard($aJson);
        }

        return parent::validateBeforeWrite($oContext, $oldValue, $newValue);
    }

    /**
     *  This can get called from a search engine's onTicketCreated() implementation
     *  when a ticket has been created or updated and needs to be indexed for a
     *  search engine. It gets called for every ticket field reported by
     *  \ref ITypePlugin::reportSearchableFieldIDs() and must return the data
     *  that the search engine should index.
     *
     *
     */
    public function makeSearchable(Ticket $oTicket)
    {
        // This is a BEGIN:VCARD VERSION ... END:VCARD string.
        // Strip the overhead.
        if ($strVCard = $oTicket->aFieldData[$this->field_id] ?? NULL)
        {
            $oHtml = self::FormatHtml($strVCard,
                                      FALSE);
            return Format::HtmlStrip($oHtml->html, FALSE);
        }

        return '';
    }


    /********************************************************************
     *
     *  Newly introduced instance methods
     *
     ********************************************************************/

    /**
     *  Converts the given VCard PHP array in POST/PUT format (see interface VCard in the front-end)
     *  to a VCard string.
     */
    public static function JsonArrayToVcard(array $aJson)
        : string
    {
        $oVCard = new VCard;

        $fAnyNameFieldsSet = FALSE;
        foreach ( [ 'lastname',
                    'firstname',
                    'additional',
                    'prefix',
                    'suffix',
                    'organization'
                  ] as $key)
        {
            if ($$key = $aJson[$key] ?? NULL)
                $fAnyNameFieldsSet = TRUE;
        }

        /** @var $lastname */
        /** @var $firstname */
        /** @var $additional */
        /** @var $prefix */
        /** @var $suffix */
        if ($fAnyNameFieldsSet)
            $oVCard->addName($lastname,
                             $firstname,
                             $additional,
                             $prefix,
                             $suffix);
        else
            throw new DrnException(L("{{L//Insufficient data to make a new contact. Please fill out at least the name fields.}}"));

        if ($v = $aJson['organization'] ?? NULL)
            $oVCard->addCompany($v);

        if ($v = $aJson['title'] ?? NULL)
            $oVCard->addJobtitle($v);

        if ($a2 = $aJson['aAddresses'] ?? NULL)
            foreach ($a2 as $aThis)
                $oVCard->addAddress(NULL,
                                    $aThis['extended'] ?? '',
                                    $aThis['street'] ?? '',
                                    $aThis['city'] ?? '',
                                    $aThis['region'] ?? '',
                                    $aThis['zip'] ?? '',
                                    $aThis['country'] ?? '',
                                    $aThis['type'] ?? '');

        if ($a2 = $aJson['aPhones'] ?? NULL)
            foreach ($a2 as $aThis)
                $oVCard->addPhoneNumber($aThis['phone'] ?? '',
                                        $aThis['type'] ?? '');

        if ($a2 = $aJson['aEmails'] ?? NULL)
            foreach ($a2 as $aThis)
                $oVCard->addEmail($aThis['email'] ?? '',
                                  $aThis['type'] ?? '');

        if ($a2 = $aJson['aUrls'] ?? NULL)
            foreach ($a2 as $aThis)
                $oVCard->addEmail($aThis['url'] ?? '',
                                  $aThis['type'] ?? '');

        return $oVCard->buildVCard();
    }

    /**
     *  Generates a PHP array representation for JSON of the given VCard string as
     *  PHP array that json_encode() can be called upon.
     *
     *  See "interface VCard" in the TypeScript for the specification.
     */
    public static function VCardToJsonArray(string $strVCard)
        : array
    {
        $aVCard = [];

        $oParser = new VCardParser($strVCard);

        try
        {
            // This throws exceptions we don't handle.
            $oCard0 = $oParser->getCardAtIndex(0);

            foreach ( [ 'lastname',
                        'firstname',
                        'additional',
                        'prefix',
                        'suffix',
                        'organization',
                        'title',
                        'note'
                      ] as $key)
                if ($value = $oCard0->$key ?? NULL)
                    $aVCard[$key] = $value;

            if ($aAddresses = $oCard0->address ?? '')
                foreach ($aAddresses as $type => $aAddresses2)
                    foreach ($aAddresses2 as $oAddress)
                    {
                        $aAddressThis = [ 'type' => $type ];
                        $c = 0;
                        foreach ( [ 'extended', 'street', 'city', 'region', 'zip', 'country' ] as $key)
                            if ($value = $oAddress->$key ?? NULL)
                            {
                                $aAddressThis[$key] = $value;
                                ++$c;
                            }
                        if ($c)
                            $aVCard['aAddresses'][] = $aAddressThis;
                    }

            if ($aPhones = $oCard0->phone ?? '')
                foreach ($aPhones as $type => $aPhones2)
                    foreach ($aPhones2 as $phone)
                        if ($phone)
                            $aVCard['aPhones'][] = [ 'type' => $type, 'phone' => $phone ];

            if ($aEMails = $oCard0->email ?? '')
                foreach ($aEMails as $type => $aEMails2)
                    foreach ($aEMails2 as $email)
                        if ($email)
                            $aVCard['aEmails'][] = [ 'type' => $type, 'email' => $email ];

            if ($aUrls = $oCard0->url ?? '')
                foreach ($aUrls as $type => $aUrls2)
                    foreach ($aUrls2 as $url)
                        if ($url)
                            $aVCard['aUrls'][] = [ 'type' => $type, 'url' => $url ];
        }
        catch (\Exception $e)
        {
        }

        return $aVCard;
    }


    /********************************************************************
     *
     *  Newly introduced static methods
     *
     ********************************************************************/

    const TYPE_ADDRESS = 1;
    const TYPE_PHONE = 2;
    const TYPE_MAIL = 3;

    public static function FormatType(string $strType,
                                      int $type,
                                      bool $fDetails)
        : string
    {
        switch ($strType)
        {
            case 'WORK':
                $ret = L("{{L//Work}}");
            break;

            case 'FAX':
                $ret = L("{{L//Fax}}");
            break;

            default:
                $ret = $strType;
        }

        if ($fDetails)
            $ret = "<b>$ret:</b>";
        else switch ($type)
        {
            case self::TYPE_ADDRESS:
                $ret = '';
            break;

            case self::TYPE_PHONE:
                $ret = Icon::Get('phone');
            break;

            case self::TYPE_MAIL:
                $ret = Icon::Get('mail');
        }

        return ($ret) ? $ret.Format::NBSP : '';
    }

    /**
     *  Static helper that formats a VCard string and can be called without a
     *  FieldHandler instance.
     *
     *  If $fDetails is TRUE, we format for the details view: multiple lines separated by <br>,
     *  and we prefix each address and phone and email with the HOME vs. WORK type etc.
     */
    public static function FormatHtml(string $strVcard = NULL,     //!< in: VCard string
                                      bool $fDetails)
        : HTMLChunk
    {
        $oHTML = new HTMLChunk();

        if ($strVcard)
        {
            $oParser = new VCardParser($strVcard);

            try
            {
                $glue = $fDetails ? " <br>" : ', ';

                $aHTMLLines = [];
                $oCard0 = $oParser->getCardAtIndex(0);

                if ($org = $oCard0->organization ?? '')
                    $aHTMLLines['Organization'] = toHTML($org);

                if ($aAddresses = $oCard0->address ?? '')
                    foreach ($aAddresses as $type => $aAddresses2)
                    {

                        foreach ($aAddresses2 as $oAddress)
                        {
                            $country = $oAddress->country ?? NULL;
                            if (!$country)
                                $country = 'DE';

                            if ($addr = Format::Address("\n",
                                                        $oAddress->extended ?? '',
                                                        $oAddress->street ?? '',
                                                        $oAddress->city ?? '',
                                                        $oAddress->region ?? '',
                                                        $oAddress->zip ?? '',
                                                        $country))
                                $aHTMLLines[] = self::FormatType($type, self::TYPE_ADDRESS, $fDetails).str_replace("\n", $glue, toHTML($addr));
                        }
                    }

                if ($aPhones = $oCard0->phone ?? '')
                    foreach ($aPhones as $type => $aPhones2)
                        foreach ($aPhones2 as $phone)
                            $aHTMLLines[] = self::FormatType($type, self::TYPE_PHONE, $fDetails).toHTML($phone);

                if ($aEMails = $oCard0->email ?? '')
                {
                    $cEmails = 0;
                    // Count emails first.
                    foreach ($aEMails as $type => $aEMails2)
                        foreach ($aEMails2 as $email)
                            ++$cEmails;

                    foreach ($aEMails as $type => $aEMails2)
                        foreach ($aEMails2 as $email)
                        {
                            $htmlMail = toHTML($email);
                            $aHTMLLines[] = (($cEmails > 1) ? self::FormatType($type, self::TYPE_MAIL, $fDetails) : '')."<a href='mailto:$htmlMail'>$htmlMail</a>";
                        }
                }

                foreach ($aHTMLLines as $html)
                    if ($html)
                    {
                        if ($oHTML->html)
                            $oHTML->append($glue);
                        $oHTML->append($html);
                    }
            }
            catch (\Exception $e)
            {
                $oHTML->addLine("Error formatting VCard data");
            }
        }

        return $oHTML;
    }

}
